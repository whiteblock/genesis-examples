services: # here, specify the type of service(s) you'd like to test -- in the context of this sample, we are testing Geth
  - name: geth1 # the name of the service you'd like to test
    description: this service runs the go-ethereum client
    image: "ethereum/client-go:alltools-latest" # specify an image and tag (if no tag is specified, defaults to 'latest')
    volumes:
      - path: /staticpeers/
        name: staticpeers
        scope: singleton
      - path: /keystore/
        name: keystore
        scope: singleton
    script: # if a script is specified here, it will overrun the image's startup command
      inline: >
        mkdir -p /geth/geth
        && cp /staticpeers/static-nodes.json /geth/geth/static-nodes.json
        && cp -r /keystore /geth/keystore
        && geth --nousb --datadir ./geth/ init /geth/genesis.json
        && geth \
          --datadir ./geth/ \
          --rpc --nodiscover \
          --rpcaddr 0.0.0.0 \
          --miner.gasprice=1 \
          --rpcapi "admin,web3,eth,net,personal,miner,txpool" \
          --rpccorsdomain "0.0.0.0" \
          --txpool.nolocals \
          --rpcvhosts=* \
          --port 30303 \
          --networkid 555555 \
          --nousb \
          --etherbase 0 \
          --unlock 0 \
          --allow-insecure-unlock \
          --password ./geth/password.txt \
          --mine \
          --minerthreads=1 \
          --nodekey=/keystore/nodekey0 \
    input-files: # here, specify the files you'd like to include from the start
      - source-path: ./genesis.json # the source-path specified should be relative to the test definition file's location
        destination-path: /geth/genesis.json
      - source-path: ./password.txt
        destination-path: /geth/password.txt
    resources: # specify the resources you'd like to allot to your service
      cpus: 2
      memory: 2 GB
      storage: 5 GiB
  - name: geth2 # the name of the service you'd like to test
    description: this service runs the go-ethereum client
    image: "ethereum/client-go:alltools-latest" # specify an image and tag (if no tag is specified, defaults to 'latest')
    volumes:
      - path: /staticpeers/
        name: staticpeers
        scope: singleton
      - path: /keystore/
        name: keystore
        scope: singleton
    script: # if a script is specified here, it will overrun the image's startup command
      inline: >
        mkdir -p /geth/geth
        && cp /staticpeers/static-nodes.json /geth/geth/static-nodes.json
        && cp -r /keystore /geth/keystore
        && geth --nousb --datadir ./geth/ init /geth/genesis.json
        && geth \
          --datadir ./geth/ \
          --rpc \
          --nodiscover \
          --rpcaddr 0.0.0.0 \
          --miner.gasprice=1 \
          --rpcapi "admin,web3,eth,net,personal,miner,txpool" \
          --rpccorsdomain "0.0.0.0" \
          --txpool.nolocals \
          --rpcvhosts=* \
          --port 30303 \
          --networkid 555555 \
          --nousb \
          --etherbase 0 \
          --unlock 0 \
          --allow-insecure-unlock \
          --password ./geth/password.txt \
          --mine \
          --minerthreads=1 \
          --nodekey=/keystore/nodekey1
    input-files: # here, specify the files you'd like to include from the start
      - source-path: ./genesis.json # the source-path specified should be relative to the test definition file's location
        destination-path: /geth/genesis.json
      - source-path: ./password.txt
        destination-path: /geth/password.txt
    resources: # specify the resources you'd like to allot to your service
      cpus: 1
      memory: 2 GB
      storage: 5 GiB

task-runners:
  - name: wait
    script:
      inline: sleep 600
  - name: geth-nodekey-helper
    description: generates nodekey files from json node info
    image: "gcr.io/whiteblock/helpers/geth/nodekey:master"
    input-files:
      - source-path: ./nodes.json
        destination-path: /geth/nodes.json
    volumes:
      - path: /keystore/
        name: keystore
        scope: singleton
    script:
      inline: /usr/bin/nodekey --file /geth/nodes.json --output /keystore
  - name: geth-keystore-helper
    description: generates keystore files from json account info
    image: "gcr.io/whiteblock/helpers/geth/keystore:master"
    input-files:
      - source-path: ./accounts.json
        destination-path: /geth/accounts.json
      - source-path: ./password.txt
        destination-path: /geth/password.txt
    volumes:
      - path: /keystore/
        name: keystore
        scope: singleton
    script:
      inline: /usr/bin/keystore --file /geth/accounts.json --password /geth/password.txt --output /keystore
    resources: # keystore needs extra computation resources to run its task
      cpus: 1
      memory: 2 GB
      storage: 5 GiB
  - name: geth-staticpeers-helper
    description: will gather the IP addresses and generate a static peers file.
    image: "gcr.io/whiteblock/helpers/besu/staticpeers:master"
    volumes:
      - path: /staticpeers/
        name: staticpeers
        scope: singleton
    script: # if a script is specified here, it will overrun the image's startup command
      inline: ./besuStaticPeers generate -a '[{"publicKey":"04eab89943b5b2aa38745051471b31dc09d187c99b8fc6b740a8587ac43d1d65d644086a862189bc6298198453ba68076ebdb9cd7013d8893878f628a664376e"},{"publicKey":"a1ae7b1352fc0e02df6d75e90046d17fb212629a608f584760434df2375fb301ec9e55ac693a77f4bc0c3efdafec3b3853aa7cb2cb48480800ef6658f747d034"}]' -i '["'$GETH1_SERVICE0_COMMON_NETWORK'","'$GETH2_SERVICE0_COMMON_NETWORK'"]' >> /staticpeers/static-nodes.json
    resources: # specify the resources you'd like to allot to your service
      cpus: 1
      memory: 2 GB
      storage: 5 GiB
tests: # here, specify the tests you'd like to run (a minimum of 1 test is required)
  - name: geth_network_2_nodes # the name of the test
    description: first test - run two geth nodes on the common-network

    phases:
      - name: create
        tasks:
        - type: geth-staticpeers-helper
        - type: geth-nodekey-helper
        - type: geth-keystore-helper
      - name: start
        description: start the remaining node(s)
        system:
        - name: geth1 # name the service instance
          type: geth1 # the type of service is the `name` of the service you specified in the services array
          count: 1 # the number of instances of this service you'd like to provision for this test
          resources: # here, you can modify the resources you've specified for your service before, and you can specify which network(s) you'd like your service to be connected to
            networks: # if a network is not specified, the service will connect to the network called "default"
              - name: common-network
        - name: geth2 # name the service instance
          type: geth2 # the type of service is the `name` of the service you specified in the services array
          count: 1 # the number of instances of this service you'd like to provision for this test
          resources: # here, you can modify the resources you've specified for your service before, and you can specify which network(s) you'd like your service to be connected to
            networks: # if a network is not specified, the service will connect to the network called "default"
              - name: common-network
      - name: wait
        tasks:
        - type: wait
